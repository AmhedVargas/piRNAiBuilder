runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
shiny::runApp('Documents/Projects/Git_repositories/PATC_2_0')
library(Biostrings)
runApp('Documents/Projects/Git_repositories/PATC_2_0')
shiny::runApp('Documents/Projects/Git_repositories/PATC_2_0')
library("Biostrings")
?matchPattern
grep("cosso","poso")
grep("cosso","poso")
pp=c()
pp=append(pp,grep("cosso","poso"))
pp=append(pp,grep("cosso","poso"))
pp=append(pp,grep("cosso","poso"))
pp=append(pp,grep("cosso","poso"))
pp=append(pp,grep("cosso","poso"))
pp=append(pp,grep("cosso","poso"))
pp
unique(pp)
length(unique(pp))
shiny::runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
enpat=c()
enpat=append(enpat,"GGTCTC","GAGACC")
enpat=append(enpat,c("GGTCTC","GAGACC"))
runApp('Documents/Projects/Git_repositories/PATC')
shiny::runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
shiny::runApp('Documents/Projects/Git_repositories/piRNA')
runApp('Documents/Projects/Git_repositories/PATC')
?write
?writeLines
runApp('Documents/Projects/Git_repositories/PATC')
shiny::runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/piRNA')
shiny::runApp('Documents/Projects/Git_repositories/piRNA')
runApp('Documents/Projects/Git_repositories/piRNA')
?textAreaInput
runApp('Documents/Projects/Git_repositories/piRNA')
runApp('Documents/Projects/Git_repositories/piRNA')
shiny::runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
paste("LOCUS",paste(wbid,"_21ur_1224_",sep="",collapse=""),"1344 bp ds-DNA","linear",paste(c(unlist(strsplit(date()," ")))[c(3,2,5)],sep="",collapse="-"),sep="\t")
?writeLines
runApp('Documents/Projects/Git_repositories/piRNABuilder')
paste("DEFINITION",".",sep="\t")
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
seq(1,1344)
seq(1,1344,10)
1344
1344-1340
write(paste("        1 ",paste(partseq[1:6],collapse=" "),sep=""), paste("WorkingSpace/users/",session_id,"/piRNAs.txt", sep=""), append=T)
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
(2==2)
((2==2)|(1==1)|(3==3)|(4==4))
((2==1)|(1==1)|(3==3)|(4==4))
((2==1)|(1==3)|(3==3)|(4==4))
((2==1)|(1==3)|(3==2)|(4==4))
((2==1)|(1==3)|(3==2)|(4==5))
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
library(shiny)
library(DT)
shinyApp(
ui <- fluidPage(
DT::dataTableOutput("data"),
textOutput('myText')
),
server <- function(input, output) {
myValue <- reactiveValues(employee = '')
shinyInput <- function(FUN, len, id, ...) {
inputs <- character(len)
for (i in seq_len(len)) {
inputs[i] <- as.character(FUN(paste0(id, i), ...))
}
inputs
}
df <- reactiveValues(data = data.frame(
Name = c('Dilbert', 'Alice', 'Wally', 'Ashok', 'Dogbert'),
Motivation = c(62, 73, 3, 99, 52),
Actions = shinyInput(actionButton, 5, 'button_', label = "Fire", onclick = 'Shiny.onInputChange(\"select_button\",  this.id)' ),
stringsAsFactors = FALSE,
row.names = 1:5
))
output$data <- DT::renderDataTable(
df$data, server = FALSE, escape = FALSE, selection = 'none'
)
observeEvent(input$select_button, {
selectedRow <- as.numeric(strsplit(input$select_button, "_")[[1]][2])
myValue$employee <<- paste('click on ',df$data[selectedRow,1])
})
output$myText <- renderText({
myValue$employee
})
}
)
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
library(shiny)
library(DT)
shinyApp(
ui <- fluidPage(
DT::dataTableOutput("data"),
textOutput('myText')
),
server <- function(input, output) {
myValue <- reactiveValues(employee = '')
shinyInput <- function(FUN, len, id, ...) {
inputs <- character(len)
for (i in seq_len(len)) {
inputs[i] <- as.character(FUN(paste0(id, i), ...))
}
inputs
}
df <- reactiveValues(data = data.frame(
Name = c('Dilbert', 'Alice', 'Wally', 'Ashok', 'Dogbert'),
Motivation = c(62, 73, 3, 99, 52),
Actions = shinyInput(actionButton, 5, 'button_', label = "Fire", onclick = 'Shiny.onInputChange(\"select_button\",  this.id)' ),
stringsAsFactors = FALSE,
row.names = 1:5
))
output$data <- DT::renderDataTable(
df$data, server = FALSE, escape = FALSE, selection = 'none'
)
observeEvent(input$select_button, {
selectedRow <- as.numeric(strsplit(input$select_button, "_")[[1]][2])
myValue$employee <<- paste('click on ',df$data[selectedRow,1])
})
output$myText <- renderText({
myValue$employee
})
}
)
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
?renderDataTable
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/PATC')
shiny::runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
shiny::runApp('Documents/Projects/Git_repositories/PATC')
runApp('Documents/Projects/Git_repositories/PATC')
shiny::runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
paste(1:10,"out of", 134,"bp")
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
shiny::runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
cat("\#")
cat("\\#")
cat("\#")
cat("#")
shiny::runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
?hr
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
runApp('Documents/Projects/Git_repositories/piRNABuilder')
shiny::runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
shiny::runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
shiny::runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
atgAGAtccAGTAAAGGAGAAGAACTTTTCACTGGAGTTGTCCCAATTCTTGTTGAATTAGATGGTGATGTTAATGGGCACAAATTTTCTGTCAGTGGAGAGGGTGAAGGTGATGCAACATACGGAAAACTTACCCTTAAATTTATTTGCACTACTGGAAAACTACCTGTTCCATGGCCAACACTTGTCACTACTTTCTgTTATGGTGTTCAATGCTTcTCgAGATACCCAGATCATATGAAACgGCATGACTTTTTCAAGAGTGCCATGCCCGAAGGTTATGTACAGGAAAGAACTATATTTTTCAAAGATGACGGGAACTACAAGACACGTGCTGAAGTCAAGTTTGAAGGTGATACCCTTGTTAATAGAATCGAGTTAAAAGGTATTGATTTTAAAGAAGATGGAAACATTCTTGGACACAAATTGGAATACAACTATAACTCACACAATGTATACATCATGGCAGACAAACAAAAGAATGGAATCAAAGTTAACTTCAAAATTAGACACAACATTGAAGATGGAAGCGTTCAACTAGCAGACCATTATCAACAAAATACTCCAATTGGCGATGGCCCTGTCCTTTTACCAGACAACCATTACCTGTCCACACAATCTGCCCTTTCGAAAGATCCCAACGAAAAGAGAGACCACATGGTCCTTCTTGAGTTTGTAACAGCTGCTGGGATTACACATGGCATGGATGAACTATACAAAggaTCT
library(Biostrings)
?resize
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
subcol=c("green")
subtol=c("ATG")
for(n in 2:length(subnames)){
if(subnames[n] %in% patterns){
subcol[n]=colors[which(subnames[n]==patterns)]
subtol[n]=tooltips[which(subnames[n]==patterns)]
}else{
subcol[n]="grey"
subtol[n]=subnames[n]
}
}
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
tata="uno;dos;tres"
strsplit(tata)
strsplit(tata,";")
unlist(strsplit(tata,";"))
paste(unlist(strsplit(tata,";")),sep=";")
paste(unlist(strsplit(tata,";")),collapse=";")
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
shiny::runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
?div
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
shiny::runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
shiny::runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
head(iris)
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
# Define User interface
shinyUI(
fluidPage(
###Loading message
tags$head(tags$style(type="text/css", "
#loadmessage {
position: fixed;
top: 60px;
left: 0px;
width: 100%;
padding: 5px 0px 5px 0px;
text-align: center;
font-weight: bold;
font-size: 100%;
color: #000000;
background-color: #D3D3D3;
z-index: 105;
}
")),
##Costum extra styles: single sliders background and title of navbar
tags$style(type = 'text/css',
".js-irs-none .irs-single, .js-irs-none .irs-bar-edge, .js-irs-none .irs-bar {
background: transparent;
border-top-color: transparent;
border-bottom-color: transparent;
border-left-color: transparent;
border-right-color: transparent}
.navbar-default .navbar-brand:hover {color: #ffffff;}
"),
tags$head(tags$script(src ="sequence-viewer.bundle.js")),
tags$style(type='text/css', '#PartialResult {white-space: pre-wrap;}'),
#Main tab pages
busyIndicator(),
navbarPage(
title=actionLink("link_to_tabpanel_genebuilder", HTML("<b>Wormbuilder</b>")),
windowTitle="WormBuilder tools",
###Theme of shiny
theme = shinytheme("flatly"),
id = "panels",
tabPanel("Gene builder",
mainPanel(
HTML("<h1>Build worm transgenes</h1>"), ###introduction
radioButtons("intypeinput", label = HTML("Type of input sequence"),
choices = list("DNA sequence" = 1,
"Protein sequence" = 2),
selected = 1, inline = TRUE, width='100%'),
conditionalPanel(condition = "input.intypeinput==1",
fluidRow(
column(8,
textAreaInput("seqDNA", label = HTML("<h3>Paste coding sequence</h3><h5>(Max 10 kb sequence with start/stop codons)</h5>"), value = "", cols= 100, rows=5, width = "600px")
),
column(8,
checkboxInput("checkAnal", label = HTML("<b>Only analyze input sequence
[<a href=\"\" onclick=\"$('#explain_anal').toggle(); return false;\">info</a>]
</b>"), value = FALSE, width='100%'),
HTML("<p align=\"justify\"><div class=\"explain\" style=\"display: none\" id=\"explain_anal\">
Analytical mode activaded. <b>Do not perform optimization and annotate original sequence.</b>
</div></p>"))
)),
conditionalPanel(condition = "input.intypeinput==2",
fluidRow(
column(8,
textAreaInput("seqPROT", label = HTML("<h3>Paste protein sequence</h3><h5>(Max 3332 aa sequence)</h5>"), value = "", cols= 100, rows=5, width = "600px")
))),
selectInput("selectCAI", label = HTML("<b>Codon usage
[<a href=\"\" onclick=\"$('#explain_codon').toggle(); return false;\">info</a>]
</b>"),
choices = list("Ubiquitous" = 1, "Germline" = 2, "Neuronal" = 3, "Somatic" = 4,"Max. expression (CAI = 1)" = 5),
selected = 1),
HTML("<p align=\"justify\"><div class=\"explain\" style=\"display: none\" id=\"explain_codon\">
Choose a codon table for transgene optimization.<br>
Tissue-specific codon frequencies are calculated from the highest expressed genes identified by <a href=\"https://doi.org/10.1101/2020.02.20.958579\">Serizay <i>et al.</i> (2020)</a> (<a href=\"https://www.ahringerlab.com\">Ahringer lab</a>).<br>
Max expression is calculated based on <a href=\"http://www.nature.com/nmeth/journal/v8/n3/full/nmeth.1565.html\">Redemann <i>et al.</i> (2011)</a> and <a href=\"https://worm.mpi-cbg.de/codons/cgi-bin/optimize.py\"><i>C. elegans</i> Codon Adapter</a>.<br>
<b>Note, all tissue-specific codons are randomly sampled, and the optimized sequences are therefore not unique.</b>
</div></p>"),
checkboxInput("checkboxRibo", label = HTML("<b>Optimize ribosomal binding
[<a href=\"\" onclick=\"$('#explain_ribo').toggle(); return false;\">info</a>]</b>"), value = FALSE),
HTML("<p align=\"justify\"><div class=\"explain\" style=\"display: none\" id=\"explain_ribo\">
This option calculates and minimizes the folding energy of positions -4 to +39 to optimize ribosome binding.<br>
<b>Note, this option adds four leading a's as a consensus start site (aaaaATG).</b>
</div></p>"),
fluidRow(
column(8,
checkboxInput("checkPirna", label = HTML("<b>Minimize <i>C. elegans</i> piRNA homology
[<a href=\"\" onclick=\"$('#explain_piRNA').toggle(); return false;\">info</a>]
</b>"), value = FALSE, width='100%')
)),
HTML("<p align=\"justify\"><div class=\"explain\" style=\"display: none\" id=\"explain_piRNA\">
This option minimizes the transgene sequence homology to piRNAs (type I and type II), which can improve germline expression.<br>Checking this option ensures that no piRNA has less than five mismatches to the optimized transgene. For more information and refined piRNA optimization, please see <a href=\"https://academic.oup.com/nar/article/46/W1/W43/4979435\">Wu et al. (2018)</a> and the online tool <a href=\"http://cosbi4.ee.ncku.edu.tw/pirScan/\">pirScan</a>.<br>
<b>Note, this option is computationally demanding, and the algorithm takes approximately four minutes per kilobase to complete under average server load.</b>
</div></p>"),
HTML("<b>Avoid common Golden Gate assembly restriction sites:</b>"),
fluidRow(
column(2,
checkboxInput("checkBsaI", label = HTML("BsaI"), value = FALSE)),
column(2,
checkboxInput("checkEsp", label = HTML("Esp3I/BsmBI"), value = FALSE)),
column(2,
checkboxInput("checkSapI", label = HTML("SapI"), value = FALSE))
),
fluidRow(
column(8,
checkboxInput("checkIntron", label = HTML("<b>Add three introns
[<a href=\"\" onclick=\"$('#explain_introns').toggle(); return false;\">info</a>]
</b>"), value = FALSE, width='100%'),
conditionalPanel(condition = "input.checkIntron==1",
radioButtons("intropt", label = HTML(""),
choices = list("Synthetic, Golden Gate compatible (BsaI, 51 bp, 33% GC)" = 1,
"rps-0 (55 bp, 15% GC)" = 2,
"rps-5 (65 bp, 22% GC)" = 3,
"rps-20 (62 bp, 28% GC)" = 4
),
selected = 1, width='100%'),
radioButtons("intdistop",label = HTML("Intron placement"),
choices = list("Early start" = 1,
"Equi-distant" = 2),
selected = 1, width='100%', inline = TRUE),
checkboxInput("checkintframe", label = HTML("Force introns in reading frame"), value = FALSE)
))),
HTML("<p align=\"justify\"><div class=\"explain\" style=\"display: none\" id=\"explain_introns\">
Adding introns can improve transgene expression <a href=\"https://pubmed.ncbi.nlm.nih.gov/8244003/\">Okkema <i>et al.</i> (1993)</a>. Introns are indicated by lower-case letters and are inserted at splice consensus sites (AG|R) (<a href=\"https://www.ncbi.nlm.nih.gov/books/NBK20075/\"><i>C. elegans</i> II, 2. ed</a>).<br>
For the germline, PATC-rich introns improve expression for single-copy insertions (<a href=\"https://www.sciencedirect.com/science/article/pii/S0092867416306766\">Frøkjær-Jensen <i>et al.</i> 2016</a>) and from extra-chromosomal arrays (Al Johani <i>et al.</i> 2020, <i>in preparation</i>).<br>
We find that placing introns near the 5' end of genes, in particular within the first 150 basepairs, is most efficient for stimulating expression (el Mouridi & Frøkjær-Jensen, unpublished observations).
</div></p>"),
actionButton("actionSeq", label = "Submit"),
verbatimTextOutput("ErrorMessage"),
hr(),
verbatimTextOutput("PartialResult"),
# uiOutput("downloadoptseq"),
# hr(),
# fluidRow(
#   htmlOutput("oldsequence"),
#   htmlOutput("newsequence"))
#dataTableOutput("OriPiTab"),
#DT::dataTableOutput("mytable"),
DT::dataTableOutput('table1')
uiOutput("AllResults")
)),
###About
tabPanel("About",
mainPanel(
h3("The app"),
HTML("<p align=\"justify\">This website is still under development </p>")
)
)
),
hr(),
HTML("<a href=\"https://syngenbio.kaust.edu.sa\">Syntetic genome biology laboratory @KAUST</a><br>"),
HTML("<a href=\"http://www.wormbuilder.org/\">Wormbuilder</a><br>"),
HTML("<a href=\"mailto:amhed.velazquez@kaust.edu.sa\">Contact us!</a>")
)
)
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
runApp('Documents/Projects/Git_repositories/GeneBuilderOnly')
shiny::runApp('Documents/Projects/Git_repositories/piRNABuilder')
shiny::runApp('Documents/Projects/Git_repositories/piRNABuilder')
